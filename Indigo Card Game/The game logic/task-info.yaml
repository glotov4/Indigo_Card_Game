type: edu
files:
- name: src/indigo/Main.kt
  visible: true
  text: |-
    package indigo

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/IndigoCardGameTest.kt
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram

    class ErrorData(val correct: Boolean, val errorMsg: String,
                    val topCard: String = "", val cardsList: List<String> = emptyList())

    class CardGameTest : StageTest<Any>() {

        @DynamicTest
        fun playFirstNormalExeTest3(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.first())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.first()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("1").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer >= numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playFirstNormalExeTest4(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.last())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.last()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("$numOfCards").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer >= numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playSecondNormalExeTest3(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("no").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.first())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.first()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("1").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }


                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer > numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playSecondNormalExeTest4(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("no").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.last())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.last()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("$numOfCards").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer > numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playFirstWrongInputTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("Hello").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("me").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("0").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("play").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            val topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            validOutput = checkPlayerOutput2(outputString, 6, 4, topCard)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.lowercase(), 0, "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong exit message.")

            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun wrongCardToPlayTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            val topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            validOutput = checkPlayerOutput2(outputString, 6, 4, topCard)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)

            outputString = main.execute("0").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")

            outputString = main.execute("7").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")

            outputString = main.execute("One").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")


            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.lowercase(), 0, "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong exit message.")

            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }

    fun checkOIfValidCards2(cardsStr: String, numOfCards: Int): Boolean {
        val cards = cardsStr.split(" ")
        val cardRegex = "(A|[2-9]|10|J|Q|K)(♦|♥|♠|♣)".toRegex()
        for (card in cards) if (!card.matches(cardRegex)) {
            return false
        }
        return cards.size == numOfCards
    }

    fun checkIfUniqueCards(outputString: String): Boolean {
        val lines = outputString.lines()
        val cards = lines.first().trim().split(" ")
        return cards.distinct().size == cards.size
    }

    fun checkOIfValidCardsInHand(cardsStr: String, numOfCards: Int): Boolean {
        val cards = cardsStr.split(" ")
        val cardRegex = "([1-6])\\)(A|[2-9]|10|J|Q|K)(♦|♥|♠|♣)".toRegex()
        for (card in cards) if (!card.matches(cardRegex)) {
            return false
        }
        return cards.size == numOfCards
    }

    fun checkInitial(output: String): ErrorData {
        val position = checkOutput(output.lowercase(), 0, "Initial cards on the table:".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong Initial cards message.")
        val cardsStr = output.substring(position).lines().map { it.trim() }.first { it != "" }
        if (cardsStr.isEmpty()) return ErrorData(false, "No initial cards are printed.")
        if ( !checkOIfValidCards2(cardsStr, 4) ) return ErrorData(false, "Invalid initial cards.")
        if ( !checkIfUniqueCards(cardsStr) ) return ErrorData(false, "Initial cards contain duplicate cards.")
        val cardsOnTable = cardsStr.trim().split(" ")
        val topCard = cardsOnTable.last()
        return ErrorData(true, "", topCard, cardsOnTable)
    }

    fun checkPlayerOutput2(output: String, numOfCards: Int, numOfCardsOnTable : Int, topCard: String): ErrorData {
        var position = if (numOfCardsOnTable == 0) checkOutput(output.lowercase(), 0, "No cards on the table".lowercase())
        else checkOutput(output.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Player turn: Wrong message for number of cards or the top card.")

        position = checkOutput(output.lowercase(), position, "Cards in hand:".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong cards in hand message.")
        var cardsInHand = output.substring(position).lines().map { it.trim() }.first { it != "" }
        if (!checkOIfValidCardsInHand(cardsInHand, numOfCards)) return ErrorData(false, "Wrong cards in hand message.")
        val listCardsInHand = cardsInHand.split(" ").map { it.substring(2) }
        var strCardsInHand = ""
        for (card in listCardsInHand) strCardsInHand += "$card "
        if ( !checkIfUniqueCards(strCardsInHand) ) return ErrorData(false, "Player's cards in hand contain duplicate cards.")
        val lastCard = listCardsInHand.last()
        position = output.indexOf(lastCard, position)
        position = checkOutput(output.lowercase(), position + lastCard.length, "Choose a card to play (1-$numOfCards):".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong prompt to choose a card.")
        return ErrorData(true, "", cardsList = listCardsInHand)
    }

    fun checkComputerOutput2(output: String, numOfCardsOnTable : Int, topCard: String): ErrorData {
        var position = if (numOfCardsOnTable == 0) checkOutput(output.lowercase(), 0, "No cards on the table".lowercase())
        else checkOutput(output.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Computer turn: Wrong output for number of cards or the top card.")

        position = checkOutput(output.lowercase(), position, "Computer plays".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong computer plays a card message.")

        val endIndex = output.indexOf("\n", position)
        if (endIndex < 0) return ErrorData(false, "Wrong output. Some lines are missing")
        val card = output.substring(position, endIndex).trim()
        if (!checkOIfValidCards2(card, 1)) return ErrorData(false, "Computer played an invalid card.")
        return ErrorData(true, "", card)
    }

    fun getRankSuit(card:String): Pair<String, String> {
        return if (card.length == 2) Pair(card.substring(0, 1), card.substring(1, 2))
        else Pair(card.substring(0, 2), card.substring(2, 3))
    }

    fun countPoints(cards: List<String>): Int {
        val ranks = listOf("A", "10", "J", "Q", "K")
        var count = 0
        for (card in cards) {
            val rank = if (card.length == 2) card.substring(0, 1)
            else card.substring(0, 2)
            if (rank in ranks) count++
        }
        return count
    }
  learner_created: false
- name: src/indigo/printTable.kt
  visible: true
  text: |+
    package indigo

  learner_created: true
- name: src/indigo/Card.kt
  visible: true
  text: |-
    package indigo

    class Card (_rank: String, _suite: String) {
        var rank = _rank
        private val defaultRank = "A"

        var suite = _suite
        private val defaultSuite = "♥"

        init { // check if Rank & Suite is available
            rank = if (Deck.RANKS.contains(_rank)) _rank else {
                println("Unknown rank. Switching to default: \"A\"")
                defaultRank
            }
            suite = if (Deck.SUITES.contains(_suite)) _suite else {
                println("Unknown suite. Switching to default: \"♥\"")
                defaultSuite
            }
        }
        override fun toString() : String {
            return "$rank$suite"
        }
    }
  learner_created: true
- name: src/indigo/Deck.kt
  visible: true
  text: |-
    package indigo

    import kotlin.random.Random

    object Deck {
        const val defaultSize = 52
        val RANKS = setOf("A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K")
        val SUITES = setOf("♥", "♦", "♠", "♣")

        var deck: MutableList<Card> = create()

        fun create() : MutableList<Card> { // creates a deck = list of Cards. Suite(Rank)
            val _deck = MutableList<Card>(defaultSize) { DEFAULT_CARD }
            var count = 0
            for (suite in SUITES)
                for (rank in RANKS) {
                    if (count == defaultSize) break
                    _deck[count] = Card(rank, suite)
                    count++
                }
            return _deck
        }

        fun reset() { // just creates new deck with defaultsize
            deck = create()
            println("Card deck is reset.")
        }

        fun shuffle() { // shuffles every card giving it random index
            for (index in 0 until deck.size) {
                val shuffler = deck[index]
                val randomIndex = Random.nextInt(0, deck.size)
                deck[index] = deck[randomIndex]
                deck[randomIndex] = shuffler
            }
    //        println("Card deck is shuffled.")
        }

        fun getCardFromDeck(numberOfCards: Int) : MutableList<Card> { // prints and takes top card out of the deck, puts it on the table
    //        println("Number of cards:")
            val cardsToGet = MutableList<Card> (numberOfCards) { DEFAULT_CARD }
            val numberInvalidError = "Invalid number of cards."
            val insufficientError = "The remaining cards are insufficient to meet the request."

            try {  // try .. if input != int then error. then check if it in range
                if (numberOfCards < 1 || numberOfCards > 52) println(numberInvalidError) else
                    if (numberOfCards > deck.size) println(insufficientError) else {
                    repeat (numberOfCards) { // take numberOfCards from the deck, put them in a list (FILO)
                        cardsToGet[it] = deck.last()
                        deck.removeLast()
                    }
                }
            }
            catch (e: java.lang.Exception) { println(numberInvalidError) }
            return cardsToGet
        }

    }
  learner_created: true
- name: src/indigo/Table.kt
  visible: true
  text: |-
    package indigo

    object Table {

        object Rules {
            const val STARTING_CARDS = 4
            const val CARDS_PER_TURN = 6
        }

        var cards = MutableList<Card>(Rules.STARTING_CARDS) { DEFAULT_CARD }
        var playersTurn = false

        fun start() {
            playFirst()
            print("Initial cards on the table:")
            cards = Deck.getCardFromDeck(Rules.STARTING_CARDS)
            for (index in 0 until Rules.STARTING_CARDS) {
                print(" ${cards[index]}")
            }
            println()
        }

        private fun playFirst() {
            println("Play first?")
            while (true) {
                when (readln().lowercase()) {
                    "yes" -> {
                        playersTurn = true
                        break
                    }
                    "no" -> {
                        playersTurn = false
                        break
                    }
                    else -> println("Play first?")
                }
            }
        }

        fun checkTopCard() : Card {
            return cards.last()
        }

        fun printNumAndTopCards() {
            println("${cards.size} cards on the table, and the top card is ${checkTopCard()}")
        }



    }
  learner_created: true
- name: src/indigo/User.kt
  visible: true
  text: |-
    package indigo

    import kotlin.random.Random
    import kotlin.system.exitProcess

    class Hand {
        var hand = MutableList<Card>(0) { DEFAULT_CARD}
        fun getSize() : Int {
            return hand.size
        }

        fun takeCards() {
            hand.addAll(Deck.getCardFromDeck(Table.Rules.CARDS_PER_TURN))
        }

        fun printCardsInHand() {
            print("Cards in hand:")
            hand.forEachIndexed { index, card -> print(" ${index + 1})$card") }
            println()
        }

        fun playCard() {
            if (Table.playersTurn) {
                println("Choose a card to play (1-${hand.size}):")
                val input = readln()
                if (input.matches("[1-${hand.size}]".toRegex())) {
                    val index = input.toInt()
                    Table.cards.add(hand[index - 1])
                    hand.removeAt(index - 1)
                } else if (input.lowercase() == "exit") {
                    println("Game Over")
                    exitProcess(0)
                } else playCard()
            } else {
                println("Computer plays ${hand.first()}\n")
                Table.cards.add(hand.first())
                hand.removeFirst()
            }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/214/stages/1075/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 26 Mar 2022 17:54:07 UTC
record: 4
